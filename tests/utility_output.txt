--------------------------------------------------

Test 1: validate_input basic tests
Input: 123, expected int
Output:  True

Input: 'hello', expected int
[1m [31m
Location: Newt.utility.validate_input
::: ERROR :::
Expected <class 'int'>, got <class 'str'>
[0m
Output:  False

Input: 3.14, expected (int, float)
Output:  True

Input: [1,2,3], expected (dict, set)
[1m [31m
Location: Newt.utility.validate_input
::: ERROR :::
Expected (<class 'dict'>, <class 'set'>), got <class 'list'>
[0m
Output:  False

--------------------------------------------------

Test 2: sorting_list with different input types
Numbers:
Input: [3, 1, 2, 3]
Output: [1, 2, 3]
Words:
Input: ['b', 'a', 'b']
Output: ['a', 'b']
Mixed:
Input: ['f', 4, 'a', 2, 'b', 1, 'a']
Output: ['a', 'b', 'f', 1, 2, 4]

--------------------------------------------------

Test 3: sorting_dict_by_keys with different sorting key options
{'name': 'Bob'}
{'name': 'Alice', 'age': 30}
{'name': 'Charlie', 'age': 25}
{'name': 'Aska', 'age': 25}

Expected: same order as input (no sort keys provided)
{'name': 'Bob'}
{'name': 'Alice', 'age': 30}
{'name': 'Charlie', 'age': 25}
{'name': 'Aska', 'age': 25}

Expected: sorted by age ascending, missing values last
{'name': 'Charlie', 'age': 25}
{'name': 'Aska', 'age': 25}
{'name': 'Alice', 'age': 30}
{'name': 'Bob'}

Expected: sorted alphabetically by name
{'name': 'Alice', 'age': 30}
{'name': 'Aska', 'age': 25}
{'name': 'Bob'}
{'name': 'Charlie', 'age': 25}

Expected: sorted by age, and by name for equal ages
{'name': 'Aska', 'age': 25}
{'name': 'Charlie', 'age': 25}
{'name': 'Alice', 'age': 30}
{'name': 'Bob'}

Expected: reversed order of previous result
{'name': 'Bob'}
{'name': 'Alice', 'age': 30}
{'name': 'Charlie', 'age': 25}
{'name': 'Aska', 'age': 25}

--------------------------------------------------
